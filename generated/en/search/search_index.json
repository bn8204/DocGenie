{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Subject :</p> <p>All software products with simple or complex needs should be accompanied by technical documentation to help stakeholders and developers understand the software development. It does not end there \u2013 it also requires product documentation and user manuals for the benefit of customer onboarding and using the product.</p> <p>Without technical documentation, developers and customers are in the dark about the purpose of your software. It becomes hard to troubleshoot issues and ensure the software is working properly.</p> <p>Technical documentation is a vital aspect of working software,  and should not be skipped during the release cycle. Whether it\u2019s release notes, knowledge bases, or user manuals, remember that 51%  of customers want to see a FAQs section on a website when making an online purchase.</p> <p>\u201cDocs or it didn\u2019t happen\u201d is a mantra for anyone building a software product, and means that documentation is more than a byproduct or afterthought of your project. It closes the gap between development and software users, as well as the gaps between those who are involved in building the software.</p> <p>What is technical documentation? Technical documentation describes and explains anything to do with your software product, ranging from internal documentation for teams to external documentation written for end users. It encompasses all written documents relating to software product development and many different types are created throughout the software development lifecycle (SDLC).</p> <p>It describes the features and functionality of the product clearly so that anyone can use it. The primary goal is to explain a particular aspect of the product to the target audience. Although it comes in a number of different forms, most technical documentation is published online and it\u2019s normally written by technical writers, developers and project managers.</p> <p>Technical documentation should be clear, concise, and accurate, and actually, solve a problem for your users.</p> <p>Importance of technical documentation Technical documentation is vitally important for your software company. Here are some reasons why.</p> <p>Enables quick decision-making by the product team When your product team has access to the right technical documentation, they can make much quicker decisions. They don\u2019t have to scroll back through emails or threads in collaboration tools \u2013 they can instead instantly consult the documents produced alongside the software that explains how everything works and records the reasoning behind the decisions.</p> <p>Contextual help for users</p> <p>When customers are using their software they can access your technical documentation alongside the product for help in using the tool. Documentation can be displayed in-app so customers don\u2019t have to switch contexts when they run into issues. This improves the overall usability and experience of your software product. Marketing tool</p> <p>Having robust technical documentation makes it easier to advertise your product to potential customers. Many customers will be researching in more detail how your product works and technical documentation can explain your software features in more depth than you can get with typical marketing materials.</p> <p>Reduces tech support calls When you have comprehensive technical documentation, customers can consult the docs when they run into technical issues.  This reduces the number of inbound calls you get to your tech support line and means you can support more customers on a smaller budget. Most customers prefer to troubleshoot problems themselves instead of waiting around for a person to help them.</p>"},{"location":"DayReadsView/","title":"DayReadsView","text":"<p>Documentation is an important form of communication \u2013 your stakeholders and developers don\u2019t need to talk to each other directly to access information about  the software. Your documentation saves knowledge for posterity and enables your team to look back at work that has previously been completed  in order to inform their future decisions.</p> <p>What is Technical Documentation Software?</p> <p>Technical documentation software allows you to create content for your users.  It\u2019s typically for an application, product or system. The documentation  software allows you to host your content in a self-service knowledge base. Users can access content through search and categories.</p> <p>Technical documentation for software includes how-to guides, tutorials, technical reference and explanation. It\u2019s often written by technical writers. It can also be authored by developers, support agents, and more.</p> <p>Technical documentation software allows you to scale your customer support \u2013 without increasing costs. You can create and publish content that solves customer problems, without the need to open a ticket. </p> <p>Writing technical documentation is no easy task. Artificial Intelligence features in the software make this process a whole lot easier. Automatically generating article titles and descriptions optimized for SEO is just one job they can do. 63% of businesses are already using some form of AI-powered customer self-service.</p> <p>Deflects More Customer Tickets 73% of customers desire the ability to handle issues independently.  When you have documentation to offer your customers you can deflect more tickets.</p> <p>Improves the Product Experience Customers who can learn how to use your product using documentation will have a better product experience, which leads to increased customer retention  and loyalty.</p> <p>Cuts the Costs of Customer Support Agents\u2019 time costs money, while the initial investment in technical documentation pays off in the long run. Thus, the fewer tickets agents need to handle,  the more money you save.</p>"},{"location":"Device%20Data%20All%20Reads%20View/","title":"Device Data Reads","text":"<p>Documentation comes in many forms, ranging from product documentation, software documentation, process documentation, academic guides, user manual, guides, SME documentation, instructional manual, release notes, and more.</p> <p>But regardless of the technical documentation or format being used for multi-channel publishing purposes, the goal for all writers when writing documentation is to provide an end-user or the intended audience with the technical specification they need to get to the right answer or solution. A comprehensive documentation site (or knowledge base) not only offers valuable content; it also has an impact on how users experience and interact with your product and brand.</p> <p>What are Good Documentation Practices? When it comes to creating a great documentation site and knowing how to write technical documentation, there are a couple of best practices to keep in mind:</p> <p>Comprehensive. Comprehensive documentation covers all aspects of the product, without making assumptions about what the user may or may not know. Examples, code samples, images, videos, and other content can play a role in providing a seamless experience for users in your user documentation. Up-to-date. Nothing is more frustrating to an end user than locating an online help topic or support page, only to find that it references an outdated feature or version of a product in your technical documents.. Easy to Find. Users shouldn\u2019t have to hunt through your site to find the answer. A menu, robust search functionality, related content links, or other easy navigation elements make for a better user interface that makes it easier for users to discover content. Visual Appeal. A well-designed knowledge base goes a long way in keeping the end user engaged with your content on your site for effective technical communication. By offering an inviting, clear experience that looks great on both mobile and desktop devices, users are given a consistent look-and-feel that matches your brand instead of ordinary technical writing text across a corpus of dull, lengthy technical documents. Looking for companies with great technical documentation examples? The following online technical documentation examples not only offer clear, comprehensive content, they also include elements that enhance the user interface and journey. And as a bonus for MadCap Flare users - these sites are all created and managed with Flare.</p> <p>Here are a couple of our favorite technical documents that follow best practices, along with their stand-out features that are essential requirements to create a positive user experience and while providing effective user documentation.</p> <p>disguise one Help Site</p>"},{"location":"Device%20Data%20All%20Reads%20View/#top-navigation-menu","title":"Top Navigation menu.","text":"<p>disguise one's navigation menu offers easy-to-access content that looks  like a natural extension of the corporate site. Whether users are viewing the site from a desktop or mobile device, the content responds appropriately. In addition, the menu and breadcrumbs quickly let users know where they are in the documentation plan.</p> <p>Video guides and tutorials. Throughout the site, users can view embedded videos that offer tutorials on how to use disguise one's products.  These training videos offer visual examples that explain how their software  works, and help to provide a consistent learning journey for customers that is easily understood.</p> <p>Suggested content. Each topic page offers related articles and other content that directs the users to relevant resources, pointing them to additional topics that could provide a different angle to a solution. These pages also ensure that they continue exploring the help site for additional user assistance.</p> <p>Solace Technical Documentation Example</p> <p> </p> <p>Branded Layout. Cleverbridge\u2019s Client Support Center serves as a seamless extension to their brand. Typography and brand colors are consistent throughout the site, ensuring that users have a streamlined experience as they explore the resources.</p>"},{"location":"Device%20Data%20All%20Reads%20View/#cleverbridge-client-support-center-example","title":"Cleverbridge Client Support Center Example","text":"<p>Resources collected in a centralized portal. Finding the right resource is no easy task, even for a technical writer. Solace responds to this need with a clear hierarchy in their navigation, starting with a central portal that lets the user view all the documentation from a central hub.</p> <p>Highlighted search functionality. The search tool takes front and center  stage in the Solace documentation site, giving users the ability to quickly  find what they\u2019re looking for. And if users need a jumping-off point,  they just need to scroll down to get started with their recommended  resources,  organized by target audience and product.</p>"},{"location":"Device%20Data%20Chart%20View/","title":"Device Chart","text":"Role-based Content Delivery. The site offers a customized experience for different types of users, narrowing down the resources that are relevant  to their role. Users can access content specific to their roles by using  a drop-down list to choose the appropriate user view.  **Sisense Documentation Example**  Quick start and easy-to-access guides. The quick start guide is for users that don\u2019t know where to start, Sisense's documentation site features a  card layout, which offers users with several options that focus on common  features of the platform. In addition, a quick start guide offers a great option for users that are new to the platform.  Seamless feel and integration with corporate website.  The clear page organization and intuitive design makes it easy for users to navigate content. In addition, the documentation site also shares common elements with the main website,  providing a consistent experience across multiple touchpoints.  Versioning selection. For users that rely on earlier versions of Sisense\u2019s platform, they have the option to select a customized view of the site. Users are then led to resources that address features specific to their selected version.   <p>Figure: one read</p> <p>Code samples. Providing code samples that software developers can test for themselves is a great resource, especially in writing API documentation. Spryker includes plenty of code samples in their user guides, along with  copy-to-clipboard links for easy access.</p> <p>Accessible Content through Search and Navigation. Spyrker's documentation is easy to browse, and robust search capabilities simplifies the process of finding the right answer. The easy navigation menu, which highlights the page or subpage you're currently on, allows for granular categorization of content.</p> <p>Whether they're searching for a specific technical document, user guide or user manual, software development documentation, product documentation, design documents, or other type of online content, users can readily find the information they need.</p> <p> </p> <p></p> <p> Figure2:Two Reads</p>"},{"location":"Device%20Data%20Detailed%20View/","title":"Device Detailed","text":"<p>\u0935This page includes a list of Java programs for beginners who want  to learn Java programming language by practice. Each blog post in this  list dives into a specific Java program, complete with detailed explanations and sample output to bolster your understanding. </p> <p>To understand a programming language, you must practice the programs; this way, you can learn the language faster. This page includes Java  programs on various Java topics such as control statements, Strings, OOPs, loops, classes &amp; objects, methods, arrays, etc. All the programs are tested  and provided with the output. Whether you're new to Java or looking to deepen your expertise, this resource greatly boosts your interview preparation. Start your journey towards becoming a Java interview pro with us!</p> <p>Note that these programs are frequently asked in Java interviews. All these Java programs have step-by-step explanations along with their output.</p> <p>Figure 1: Detail view of device reading</p> <p> </p> <p> 1. Introduction The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. It's denoted by n! and plays a significant role in mathematics and  computer science, especially in permutations and combinations. This blog post will demonstrate how to calculate the factorial of a number using recursion in Java, a fundamental concept in  programming that involves a function calling itself.</p> <p>Program Steps 1. Define a recursive method to calculate the factorial.</p> <ol> <li> <p>Read the number for which the factorial is to be calculated from the user.</p> </li> <li> <p>Call the recursive method with the user input.</p> </li> <li> <p>Display the factorial of the given number.</p> </li> <li> <p>Handle cases where the input is less than 0, as factorials for negative numbers are not defined.</p> </li> </ol> <p>Code Program</p> <p>import java.util.Scanner;</p> <p>public class FactorialUsingRecursion {     public static void main(String[] args) {         // Creating a Scanner object to read input         Scanner scanner = new Scanner(System.in);         System.out.println(\"Enter a non-negative integer:\");         int number = scanner.nextInt(); // Reading the number</p> <pre><code>    // Checking if the number is non-negative\n    if (number &gt;= 0) {\n        long factorial = factorial(number); // Calculating the factorial\n        System.out.println(\"Factorial of \" + number + \" is: \" + factorial);\n    } else {\n        System.out.println(\"Factorial is not defined for negative numbers.\");\n    }\n\n    scanner.close(); // Closing the scanner\n}\n\n// Recursive method to calculate factorial\npublic static long factorial(int n) {\n    if (n &lt;= 1) { // Base case: factorial of 0 or 1 is 1\n        return 1;\n    } else {\n        return n * factorial(n - 1); // Recursive call\n    }\n}\n</code></pre> <p>}</p>"},{"location":"Device%20Data%20Time%20Aligned%20View/","title":"Device TimeAlign","text":"<p>Explanation:</p> <ol> <li> <p>The program begins by importing the Scanner class for reading user input.</p> </li> <li> <p>A Scanner object is created, and the user is prompted to enter a non-negative integer. This integer is read and stored in the number variable.</p> </li> <li> <p>Before calculating the factorial, the program checks if the input number is non-negative. Factorials are only defined for non-negative integers.</p> </li> <li> <p>The factorial method is defined as a recursive function. It takes an integer n as input and returns its factorial. The base case of the recursion is when n is 0 or 1, in which case the method returns 1. For all other values of n, the method returns n multiplied by the factorial of n-1.</p> </li> <li> <p>This recursive approach simplifies the process of calculating the factorial by breaking it down into simpler sub-problems. The multiplication accumulates during the return phase of the recursion, ultimately yielding the factorial of the original number.</p> </li> <li> <p>After computing the factorial, the result is printed to the console.</p> </li> <li> <p>Finally, the Scanner object is closed to prevent resource leaks.</p> </li> </ol> <p>Figure :Table of reads</p>"},{"location":"Device%20Reads%20Chart/","title":"Device Reads Chart","text":"<p>Object Oriented Programming in Java with Examples</p> <p>This page contains a list of articles, tutorials, and examples on important OOPS concepts and OOPS principles.</p> <p>Well, in order to design strong object-oriented design for Java or JavaEE  Web Applications, you need to have strong knowledge of OOPS concepts and  OOPS principles.</p> <p>All OOPS concepts and OOPS principles are explained with real-world examples, lots of source code with an explanation, applicability, class diagrams, etc.</p> <p>OOPS Concepts  In this section of the tutorials, we cover basic and advanced OOPS concepts for beginners:  - Object  - Class  - Abstraction  - Encapsulation  - Inheritance  - Polymorphism  - Composition  - Aggregation  - Association  - Cohesion  - Coupling  - Delegation</p> <p></p> <p>An object is an instance of a class that represents a real-world entity or concept. It is created based on the blueprint provided by the class and has its own identity, state, and behavior.</p> <ul> <li>Identity: Each object has a unique identity, which differentiates it from other objects.</li> <li>State: The state of an object is represented by its attributes (fields or properties).</li> <li>Behavior: The behavior of an object is represented by its methods (functions or operations).</li> </ul> <p>Key Points: Objects are instances of classes. They encapsulate state and behavior. Objects are created using the new keyword in Java. Syntax for Creating an Object The syntax for creating an object in Java is:</p> <p>{ ClassName objectName = new ClassName(); }</p>"},{"location":"ReadingFilterDetails/","title":"Filter Readings","text":"<p>URI - Uniform Resource Identifier  The resource can be identified by a Uniform Resource Identifier (URI). For  web-based systems, HTTP is the most commonly used protocol for communicating with external systems. You can identify a unique resource using a URI.</p> <p>Consider, we are developing a simple blog application and you can define URIs for a blog Post resource:</p> <p>GET\u2014http://localhost:8080/api/posts/: Returns a list of all posts</p> <p>GET\u2014http://localhost:8080/api/posts/2: Returns a post whose ID is 2</p> <p>POST\u2014http://localhost:8080/api/posts/: Creates a new Post resource</p> <p>PUT\u2014http://localhost:8080/api/posts/2: Updates a POST resource whose ID is 2</p> <p>DELETE\u2014http://localhost:8080/api/posts/2: Deletes a POST resource whose ID is 2</p> <p>Sub-resource In REST, the relationships are often modeled by a sub-resource. Use the following pattern for sub-resources.</p> <p>GET  /{resource}/{resource-id}/{sub-resource}</p> <p>GET  /{resource}/{resource-id}/{sub-resource}/{sub-resource-id}</p> <p>POST /{resource}/{resource-id}/{sub-resource}</p> <p>Example: </p> <p>GET  /{post}/{post-id}/{comments} GET  /{post}/{post-id}/{comments}/{comment-id} POST /{post}/{post-id}/{comments} Use sub-resources child object cannot exist without its parent.</p> <p>HTTP Methods Common HTTP verbs: \u2022    GET\u2014To get a collection or a single resource \u2022    POST\u2014To create a new resource \u2022    PUT\u2014To update an existing resource \u2022    DELETE\u2014To delete a collection or a single resource Read more about HTTP methods at REST API - HTTP Methods HTTP Status Code Some of the frequently used status codes in this class are as follows: 200 OK: This code indicates that the request is successful and the response content is returned to the client as appropriate. 201 Created: This code indicates that the request is successful and a new resource is created. 400 Bad Request: This code indicates that the server failed to process the request because of the malformed syntax in the request. The client can try again after correcting the request. 401 Unauthorized: This code indicates that authentication is required for the resource. The client can try again with appropriate authentication. 403 Forbidden: This code indicates that the server is refusing to respond to the request even if the request is valid. The reason will be listed in the body content if the request is not a HEAD method. 404 Not Found: This code indicates that the requested resource is not found at the location specified in the request. 500 Internal Server Error: This code indicates a generic error message, and it tells that an unexpected error occurred on the server and that the request cannot be fulfilled.</p>"},{"location":"Saved%20Search/","title":"Saved Search","text":"<p>Why Java Does Not Support Multiple Inheritance Author: Ramesh Fadatare Java Java Interview</p> <p>Introduction In object-oriented  programming (OOP), inheritance is a concept where one class can inherit properties and methods from another. However, some  programming languages like C++ allow a class to inherit from more than one class. This is called multiple inheritance. Interestingly, Java does not support multiple inheritance through classes, and there is a good reason for this.</p> <p>In this post, we\u2019ll explain why Java does not support multiple inheritance and how it handles inheritance using interfaces instead.</p> <p>What is Multiple Inheritance? Multiple inheritance occurs when a class can inherit properties and methods from more than one class. This means that a single subclass can have more than one parent class. While this feature may seem useful, it can lead to complex situations that are hard to manage.</p> <p>Example of Multiple Inheritance in C++: In C++, multiple inheritance is allowed:</p> <p>class A { public:     void display() {         cout &lt;&lt; \"Class A\";     } };</p> <p>class B { public:     void display() {         cout &lt;&lt; \"Class B\";     } };</p> <p>class C : public A, public B {     // Class C inherits from both A and B };</p> <p>int main() {     C obj;     obj.display(); // Which display() method should be called: A\u2019s or B\u2019s? } In this case, if C inherits from both A and B, and both A and B have a display() method, the compiler wouldn\u2019t know which display() method to call. This creates ambiguity.</p> <p>The Diamond Problem The Diamond Problem is a key reason why Java avoids multiple inheritance. This problem occurs when a class inherits from two classes that both inherit from the same parent class. This creates a \u201cdiamond\u201d structure in the inheritance chain, which leads to confusion about which version of a method or property to use.</p> <p>Diamond Problem Example in C++: class A { public:     void show() {         cout &lt;&lt; \"Class A\";     } };</p> <p>class B : public A {}; class C : public A {}; class D : public B, public C {};</p> <p>int main() {     D obj;     obj.show(); // Which 'show()' method should be called from A? } In this case, D inherits from both B and C, which both inherit from A. When you call show(), the compiler doesn\u2019t know which version of A\u2019s method to use. This ambiguity is called the Diamond Problem, and it complicates the inheritance structure.</p> <p>Java\u2019s Approach: No Multiple Inheritance Through Classes To avoid the issues like the Diamond Problem, Java does not support multiple inheritance with classes. In Java, a class can inherit from only one parent class, ensuring that the inheritance hierarchy is clear and straightforward. This makes it easier for the compiler to understand which methods to use and how the inheritance chain works.</p> <p>By preventing multiple inheritance, Java avoids the complications that come with having multiple parent classes, ensuring that the language remains simple and easy to use.</p> <p>Example of Single Inheritance in Java: class A {     public void display() {         System.out.println(\"Class A\");     } }</p> <p>class B extends A {     // B can only inherit from A }</p> <p>public class Main {     public static void main(String[] args) {         B obj = new B();         obj.display(); // This will call A's display() method     } } In this example, B can only inherit from A, and there is no ambiguity when calling the display() method. Java\u2019s single inheritance model keeps the inheritance structure clear.</p> <p>Java\u2019s Solution: Interfaces Even though Java does not allow multiple inheritance with classes, it provides a flexible solution through interfaces. An interface is like a contract that a class can implement. A class in Java can implement multiple interfaces, allowing it to achieve multiple inheritance-like behavior without the complications of the Diamond Problem.</p> <p>Example of Multiple Inheritance with Interfaces: interface A {     void display(); }</p> <p>interface B {     void show(); }</p> <p>class C implements A, B {     public void display() {         System.out.println(\"Display from Interface A\");     }</p> <pre><code>public void show() {\n    System.out.println(\"Show from Interface B\");\n}\n</code></pre> <p>}</p> <p>public class Main {     public static void main(String[] args) {         C obj = new C();         obj.display();         obj.show();     } } In this example, class C implements both interfaces A and B. This allows C to inherit methods from both interfaces without facing the ambiguity issues seen in multiple inheritance through classes.</p> <p>Why Does Java Use Interfaces Instead? Java uses interfaces to achieve the benefits of multiple inheritance without its complications. Here\u2019s why:</p> <p>No Ambiguity: With interfaces, there\u2019s no confusion over which method to call. Each class that implements an interface must provide its own implementation of the interface\u2019s methods.</p> <p>Flexibility: Java allows a class to implement multiple interfaces. This gives developers the flexibility to inherit behavior from multiple sources without causing issues like the Diamond Problem.</p> <p>Clear Design: Interfaces help maintain a clear and manageable code structure. They separate what a class does from how it does it, encouraging better design and reducing complexity.</p> <p>Conclusion Java avoids the issues caused by multiple inheritance, such as the Diamond Problem, by not supporting it through classes. Instead, Java provides a flexible solution with interfaces, allowing developers to achieve multiple inheritance-like behavior without ambiguity or complexity. This decision keeps Java\u2019s inheritance model simple, while still offering the  flexibility to inherit from multiple sources when needed. History of Java Java started in 1991 when James Gosling, Mike Sheridan, and Patrick Naughton from Sun Microsystems began the Green Project. Their goal was to create a language for digital devices like set-top boxes and televisions. They wanted a language that could run on any device, regardless of hardware or software.</p> <p>Initially, the language was called Oak, and it was named after an oak tree outside James Gosling\u2019s office. However, due to trademark issues, it was renamed Java, inspired by Java coffee. In 1995, Java was officially launched with the slogan \u201cWrite Once, Run Anywhere\u201d (WORA).</p> <p>Main Features of Java Object-Oriented Java is an object-oriented language where everything is done with objects (data) in mind.</p> <p>Modularity: Code is organized into classes and objects. Reusability: Promotes code reuse through inheritance and polymorphism. Encapsulation: Data and methods are encapsulated in classes. Simple Java is designed to be easy to learn and use. Its syntax is clean and straightforward, making it accessible to beginners with basic programming knowledge.</p> <p>Readable Syntax: Simple and understandable syntax. Eliminates Complex Features: No explicit pointers and operator overloading. Platform-Independent Java is a write-once, run-anywhere language. Java programs written on one  platform can run on any other platform without modification.</p> <p>Java Virtual Machine (JVM): This abstraction of the underlying platform allows Java code to be executed on any device with a JVM. Bytecode: Java source code is compiled into bytecode, which is platform-independent. Secure Java is a highly secure language through which you can develop virus-free and highly secure  applications.</p> <p>Bytecode Verification: Ensures code adheres to Java security constraints. No Explicit Pointers: Eliminates the risk of pointer-related vulnerabilities. Security Manager: Manages access to system resources and user data. Robust Java is robust because of its strong memory management, lack of pointers, and exception-handling mechanisms.</p> <p>Automatic Garbage Collection: Automatically manages memory allocation and deallocation. Exception Handling: Provides a robust mechanism for handling runtime errors. Portable Java is portable because you can run Java bytecode on any hardware with a compliant JVM.</p> <p>Platform-Independent Libraries: Standard libraries provide a consistent API across platforms. Multithreaded Java supports multithreaded programming, allowing multiple threads to execute tasks simultaneously.</p> <p>Concurrency: Built-in support for multithreading and synchronization. Thread Lifecycle Management: Provides mechanisms to control the lifecycle of threads. Distributed Java is designed for the distributed environment of the internet.</p> <p>Remote Method Invocation (RMI): Allows invocation of methods that reside on different machines. Enterprise JavaBeans (EJB): Enables building distributed, scalable, and secure enterprise-level applications. High Performance Java's performance is enhanced through the use of Just-In-Time (JIT) compilers.</p> <p>JIT Compilation: Converts bytecode into native machine code at runtime, improving execution speed. Types of Applications You Can Build with Java Web Applications Java provides robust frameworks like Spring and JavaServer Faces (JSF) for building scalable web applications.</p> <p>Mobile Applications Java is the primary language for Android development, allowing the creation of powerful mobile applications.</p> <p>Enterprise Applications Java is widely used in enterprise environments due to its stability, scalability, and performance.</p> <p>Desktop Applications Java's rich set of libraries, such as JavaFX and Swing, support the development of feature-rich desktop applications.</p> <p>Embedded Systems Java can be used to develop applications for embedded systems and Internet of Things (IoT) devices.</p> <p>Example: Simple Java Program public class HelloWorld {     public static void main(String[] args) {         System.out.println(\"Hello, World!\");     } }</p> <p>Explanation Class Declaration: public class HelloWorld declares a class named HelloWorld. Main Method: public static void main(String[] args) is the entry point of the program. Print Statement: System.out.println(\"Hello, World!\"); prints \"Hello, World!\" to the console. Conclusion Java is a powerful, versatile, and widely used programming language that has stood the test of time. Its platform independence, security features, and robustness make it a popular choice for developing a wide range of applications. By leveraging Java's extensive libraries and frameworks, developers can build efficient, scalable, and secure software solutions.</p> <p>Summary of Key Points: Object-Oriented: Emphasizes the use of objects and classes. Platform-Independent: Write once, run anywhere (WORA) capability. Secure and Robust: Designed with security features and strong memory management. Multithreaded: Supports concurrent execution of multiple threads. High Performance: Utilizes Just-In-Time (JIT) compiler for faster execution</p>"},{"location":"Search%20Information/","title":"Search Information","text":"<ol> <li>REST Introduction What is REST? The REST stands for  REpresentational State Transfer.</li> </ol> <p>Let's understand the meaning of each word in the REST acronym.</p> <p>State means data  REpresentational means formats (such as XML, JSON, YAML, HTML, etc)  Transfer means carrying data between consumer and provider using the HTTP protocol REpresentational State Transfer REST was originally coined by Roy Fielding, who was also the inventor of the HTTP protocol. A REST API is an intermediary Application Programming Interface that enables two applications to communicate with each other over HTTP, much like how servers communicate to browsers. The REST architectural style has quickly become very popular over the world for designing and architecting applications that can communicate.  The need for REST APIs increased a lot with the drastic increase of mobile devices. It became logical to build REST APIs and let the web and mobile clients consume the API instead of developing separate applications. 2. REST Architecture The below diagram shows the typical REST architecture:</p> <p>Let's understand a few web service term's by looking into the above architecture: Request and Response: Request is the input to a web service, and the response is the output from a web service.</p> <p>Message Exchange Format: It is the format of the request and response. There are two popular message exchange formats: XML and JSON.</p> <p>Service Provider or Server: The service provider is one that hosts the web service.</p> <p>Service Consumer or Client: A service consumer is one who is using a web service.</p> <p>It is the responsibility of the consumer means client application to prepare and send HTTP request message</p> <p>It is the responsibility of the business component (developed by a service provider) to prepare and send the HTTP response message 3. REST Architectural Constraints An API that has the following constraints is known as RESTful API:</p> <p>Client-server architecture: The client is the front-end and the server is the back-end of the service. It is important to note that both of these entities are independent of each other.</p> <p>Stateless: No data should be stored on the server during the processing of the request transfer. The state of the session should be saved at the client\u2019s end.</p> <p>Cacheable: The client should have the ability to store responses in a cache. This greatly improves the performance of the API.</p> <p>Uniform Interface: This constraint indicates a generic interface to manage all the interactions between the client and server in a unified way, which simplifies and decouples the architecture. </p> <p>Layered System: The server can have multiple layers for implementation. This layered architecture helps to improve scalability by enabling load balancing.</p> <p>Code on Demand: This constraint is optional. This constraint indicates that the functionality of the client applications can be extended at runtime by allowing a code download from the server and executing the code.</p> <p>Read more about constraints at https://www.javaguides.net/2018/06/rest-architectural-constraints.html 4. REST Key Concepts Resource The fundamental concept of a REST-based system is the resource. A resource is anything you want to expose to the outside world, through your  application.</p> <p>Example 1: Resources for Employee Management System:</p> <ul> <li> <p>Employee</p> </li> <li> <p>Department</p> </li> <li> <p>Projects</p> </li> <li> <p>Task</p> </li> <li> <p>Address</p> </li> </ul> <p>Example 2: Resources for Student Management System:</p> <ul> <li> <p>Student</p> </li> <li> <p>Teacher</p> </li> <li> <p>School</p> </li> <li> <p>Class</p> </li> <li> <p>Subject</p> </li> </ul>"},{"location":"SummaryOfServiceDelivery/","title":"Service Summary","text":"<p>URI - Uniform Resource Identifier  The resource can be identified by a Uniform Resource Identifier (URI). For  web-based systems, HTTP is the most commonly used protocol for communicating with external systems. You can identify a unique resource using a URI.</p> <p>Consider, we are developing a simple blog application and you can define URIs for a blog Post resource:</p> <p>GET\u2014http://localhost:8080/api/posts/: Returns a list of all posts</p> <p>GET\u2014http://localhost:8080/api/posts/2: Returns a post whose ID is 2</p> <p>POST\u2014http://localhost:8080/api/posts/: Creates a new Post resource</p> <p>PUT\u2014http://localhost:8080/api/posts/2: Updates a POST resource whose ID is 2</p> <p>DELETE\u2014http://localhost:8080/api/posts/2: Deletes a POST resource whose ID is 2</p> <p>Sub-resource In REST, the relationships are often modeled by a sub-resource. Use the following pattern for sub-resources.</p> <p>GET  /{resource}/{resource-id}/{sub-resource}</p> <p>GET  /{resource}/{resource-id}/{sub-resource}/{sub-resource-id}</p> <p>POST /{resource}/{resource-id}/{sub-resource}</p> <p>Example: </p> <p>GET  /{post}/{post-id}/{comments} GET  /{post}/{post-id}/{comments}/{comment-id} POST /{post}/{post-id}/{comments} Use sub-resources child object cannot exist without its parent.</p> <p>HTTP Methods Common HTTP verbs: \u2022    GET\u2014To get a collection or a single resource \u2022    POST\u2014To create a new resource \u2022    PUT\u2014To update an existing resource \u2022    DELETE\u2014To delete a collection or a single resource Read more about HTTP methods at REST API - HTTP Methods HTTP Status Code Some of the frequently used status codes in this class are as follows: 200 OK: This code indicates that the request is successful and the response content is returned to the client as appropriate. 201 Created: This code indicates that the request is successful and a new resource is created. 400 Bad Request: This code indicates that the server failed to process the request because of the malformed syntax in the request. The client can try again after correcting the request. 401 Unauthorized: This code indicates that authentication is required for the resource. The client can try again with appropriate authentication. 403 Forbidden: This code indicates that the server is refusing to respond to the request even if the request is valid. The reason will be listed in the body content if the request is not a HEAD method. 404 Not Found: This code indicates that the requested resource is not found at the location specified in the request. 500 Internal Server Error: This code indicates a generic error message, and it tells that an unexpected error occurred on the server and that the request cannot be fulfilled.</p>"},{"location":"TheServiceDetails/","title":"ServiceDetails","text":"<p>URI - Uniform Resource Identifier  The resource can be identified by a Uniform Resource Identifier (URI). For  web-based systems, HTTP is the most commonly used protocol for communicating with external systems. You can identify a unique resource using a URI.</p> <p>Consider, we are developing a simple blog application and you can define URIs for a blog Post resource:</p> <p>GET\u2014http://localhost:8080/api/posts/: Returns a list of all posts</p> <p>GET\u2014http://localhost:8080/api/posts/2: Returns a post whose ID is 2</p> <p>POST\u2014http://localhost:8080/api/posts/: Creates a new Post resource</p> <p>PUT\u2014http://localhost:8080/api/posts/2: Updates a POST resource whose ID is 2</p> <p>DELETE\u2014http://localhost:8080/api/posts/2: Deletes a POST resource whose ID is 2</p> <p>Sub-resource In REST, the relationships are often modeled by a sub-resource. Use the following pattern for sub-resources.</p> <p>GET  /{resource}/{resource-id}/{sub-resource}</p> <p>GET  /{resource}/{resource-id}/{sub-resource}/{sub-resource-id}</p> <p>POST /{resource}/{resource-id}/{sub-resource}</p> <p>Example: </p> <p>GET  /{post}/{post-id}/{comments} GET  /{post}/{post-id}/{comments}/{comment-id} POST /{post}/{post-id}/{comments} Use sub-resources child object cannot exist without its parent.</p> <p>HTTP Methods Common HTTP verbs: \u2022    GET\u2014To get a collection or a single resource \u2022    POST\u2014To create a new resource \u2022    PUT\u2014To update an existing resource \u2022    DELETE\u2014To delete a collection or a single resource Read more about HTTP methods at REST API - HTTP Methods HTTP Status Code Some of the frequently used status codes in this class are as follows: 200 OK: This code indicates that the request is successful and the response content is returned to the client as appropriate. 201 Created: This code indicates that the request is successful and a new resource is created. 400 Bad Request: This code indicates that the server failed to process the request because of the malformed syntax in the request. The client can try again after correcting the request. 401 Unauthorized: This code indicates that authentication is required for the resource. The client can try again with appropriate authentication. 403 Forbidden: This code indicates that the server is refusing to respond to the request even if the request is valid. The reason will be listed in the body content if the request is not a HEAD method. 404 Not Found: This code indicates that the requested resource is not found at the location specified in the request. 500 Internal Server Error: This code indicates a generic error message, and it tells that an unexpected error occurred on the server and that the request cannot be fulfilled.</p>"}]}